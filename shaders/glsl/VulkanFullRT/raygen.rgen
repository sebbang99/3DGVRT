/*
 * Sogang Univ, Graphics Lab, 2024
 * 
 * Vulkan Full Ray Tracing
 * 
 */

#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : require

#include "../base/define.glsl"
#include "../base/light.glsl"
#include "../base/geometrytypes.glsl"

struct RayPayload {
	vec3 color;
	float dist;
	vec3 normal;
	int effectFlag;
};
layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

// Initialized with default value. Appropriate value will be transfered from application.
layout(constant_id = 1) const uint numOfDynamicLights = 1;
#if DYNAMIC_SCENE
layout(constant_id = 4) const uint numGeometryNodesForStatic = 1;
#endif

layout(binding = 2, set = 0) uniform uniformBuffer
{
	mat4 viewInverse;
	mat4 projInverse;
	Light lights[numOfDynamicLights];
} ubo;

#if SPLIT_BLAS
layout(binding = 7, set = 0) buffer Materials{ MaterialInfo mats[]; } materials;
#else
layout(binding = 6, set = 0) buffer GeometryNodes { GeometryNode nodes[]; } geometryNodes;
#endif

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);	// pixel position
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);	// pixel position in WdC
	vec2 d = inUV * 2.0 - 1.0;	// pixel position in NDC

	vec4 origin = ubo.viewInverse[3];
	vec4 target = ubo.projInverse * vec4(d.x, d.y, 1.0f, 1.0f) ;	// (pixel position in EC) / Wc
	vec4 direction = normalize(ubo.viewInverse * vec4(normalize(target.xyz), 0.0f));

	float tmax = 10000.0f;

	const int iterations = ITERATIONS;

	vec3 finalColor = vec3(0.0f);
	float iorPrev = 1.0f;
	float product = 1.0f;
	for (int iter = 0; iter < ITERATIONS; iter++) {
#if ANY_HIT
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin.xyz, RAY_TMIN, direction.xyz, tmax, 0);
#else
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, RAY_TMIN, direction.xyz, tmax, 0);
#endif
		finalColor += product * rayPayload.color;

		if (rayPayload.dist < 0.0f) {	// from miss shader
			break;
		} 
		else if (rayPayload.effectFlag > 0) {	// from chit shader & reflector 
			vec3 normal_reflect = rayPayload.normal;

			const vec4 hitPos = origin + direction * rayPayload.dist;
			origin.xyz = hitPos.xyz + normal_reflect * RAY_TMIN;
			direction.xyz = reflect(direction.xyz, normal_reflect);
#if SPLIT_BLAS
			MaterialInfo mat = materials.mats[nonuniformEXT(rayPayload.effectFlag - 1)];
			product *= mat.reflectance;
#else
			GeometryNode geometryNode = geometryNodes.nodes[nonuniformEXT(rayPayload.effectFlag - 1)];
			product *= geometryNode.reflectance;
#endif
			
		} 
		else if (rayPayload.effectFlag < 0) {	// from chit shader & refractor
			vec3 normal_refract = rayPayload.normal;

#if SPLIT_BLAS
			MaterialInfo mat = materials.mats[nonuniformEXT(-1 - rayPayload.effectFlag)];

			if (dot(direction.xyz, normal_refract) > 0.0f) {	// when ray goes out from the sphere.
				normal_refract *= -1.0f;
				iorPrev = mat.ior;
				mat.ior = 1.0f;
			}

			const vec4 hitPos = origin + direction * rayPayload.dist;
			origin.xyz = hitPos.xyz - normal_refract * RAY_TMIN;
			direction.xyz = refract(direction.xyz, normal_refract, iorPrev / mat.ior);
			product *= mat.refractance;
#else
			GeometryNode geometryNode = geometryNodes.nodes[nonuniformEXT(-1 - rayPayload.effectFlag)];

			if (dot(direction.xyz, normal_refract) > 0.0f) {	// when ray goes out from the sphere.
				normal_refract *= -1.0f;
				iorPrev = geometryNode.ior;
				geometryNode.ior = 1.0f;
			}

			const vec4 hitPos = origin + direction * rayPayload.dist;
			origin.xyz = hitPos.xyz - normal_refract * RAY_TMIN;
			direction.xyz = refract(direction.xyz, normal_refract, iorPrev / geometryNode.ior);
			product *= geometryNode.refractance;
#endif
		}
		else {	// from chit shader & not reflector & not refractor

			break;
		}
	}

	finalColor = pow(finalColor, vec3(1.0f / 2.2f));	// Gamma correction
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));	
}
