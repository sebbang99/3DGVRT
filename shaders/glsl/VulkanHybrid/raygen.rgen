/*
 * Sogang Univ, Graphics Lab, 2024
 * 
 * Vulkan Hybrid
 * 
 */

#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : require

#include "../base/define.glsl"
#include "../base/geometrytypes.glsl"
#include "../base/light.glsl"
#include "../base/pbr.glsl"

struct RayPayload {
	vec3 color;
	float dist;
	vec3 normal;
	uint objectID;
};
layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(location = 1) rayPayloadEXT bool shadowed;

// Initialized with default value. Appropriate value will be transfered from application.
layout(constant_id = 0) const uint numOfLights = 1;	
layout(constant_id = 1) const uint numOfDynamicLights = 1;
layout(constant_id = 2) const uint numOfStaticLights = 1;
layout(constant_id = 3) const uint staticLightOffset = 1;

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform uniformBuffer
{
	mat4 viewInverse;
	mat4 projInverse;
	Light lights[numOfDynamicLights];
} ubo;
layout(binding = 9, set = 0) uniform uniformBufferStaticLight
{
	Light lights[numOfStaticLights];
} uboStaticLight;
layout(binding = 3) uniform sampler2D samplerPosition;
layout(binding = 4) uniform sampler2D samplerNormal;
layout(binding = 5) uniform sampler2D samplerAlbedo;
layout(binding = 6) uniform sampler2D samplerMetallicRoughness;
layout(binding = 7) uniform sampler2D samplerEmissive;
layout(binding = 8) uniform samplerCube samplerEnvMap;
layout(binding = 10) uniform sampler2D textures[];
#if SPLIT_BLAS
layout(binding = 12, set = 0) buffer Materials{ MaterialInfo mats[]; } materials;
#else
layout(binding = 11, set = 0) buffer GeometryNodes { GeometryNode nodes[]; } geometryNodes;
#endif

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);	// pixel position
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);	// pixel position in WdC
	vec2 d = inUV * 2.0f - 1.0f;	// pixel position in NDC
	
	vec4 originPos = texture(samplerPosition, inUV).xyzw;
	vec3 pos = originPos.xyz;
	uint objectID = uint(round(originPos.w));

	if (objectID-- == 0)
    {
        vec4 target = ubo.projInverse * vec4(d.x, d.y, 1.0f, 1.0f);    // (pixel position in EC) / Wc
        vec3 direction = normalize(ubo.viewInverse * vec4(normalize(target.xyz), 0.0f)).xyz;
        vec3 envColor = textureLod(samplerEnvMap, direction, 0.0f).rgb;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(envColor, 1.0f));
        return;
    }

	vec3 albedo = pow(texture(samplerAlbedo, inUV).rgb, vec3(2.2f));
	vec3 aoRoughnessMetallic = texture(samplerMetallicRoughness, inUV).rgb;
	vec3 emissive = texture(samplerEmissive, inUV).rgb;
	if (emissive == vec3(1.0f)) emissive = vec3(0.0f);
	vec3 N = texture(samplerNormal, inUV).xyz;

	vec3 V = normalize((ubo.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz - pos);

#if SPLIT_BLAS
	MaterialInfo geometryNode = materials.mats[nonuniformEXT(objectID)];
#else
	GeometryNode geometryNode = geometryNodes.nodes[nonuniformEXT(objectID)];
#endif

    if(((pushConstants.rayOption.reflection) && (geometryNode.reflectance > 0.0f)) || ((pushConstants.rayOption.refraction) && (geometryNode.refractance > 0.0f))){
		albedo.rgb = vec3(0.0f);
	}
	else {
		geometryNode.refractance = 0.0f;
		geometryNode.reflectance = 0.0f;
	}
	aoRoughnessMetallic *= vec3(1.0f, geometryNode.roughnessFactor, geometryNode.metallicFactor);
	vec3 F0 = vec3(((geometryNode.ior - 1.0f)/(geometryNode.ior + 1.0f)) * ((geometryNode.ior - 1.0f)/(geometryNode.ior + 1.0f)));
	F0 = mix(F0, albedo, aoRoughnessMetallic.b);

	vec3 finalColor = vec3(0.05f) * albedo + emissive;	// emissive

	// Local Shading Part
	{
		for(int i = 0; i < numOfLights; i++) {
			Light light;
			if (i < staticLightOffset)
				light = ubo.lights[i];
			else 
				light = uboStaticLight.lights[i - staticLightOffset];

			shadowed = false;
			if (pushConstants.rayOption.shadowRay) {

				vec3 shadowRayDirection = light.position.xyz - pos;
				float tmax = length(shadowRayDirection);
				if (tmax > light.radius)
					continue;

				shadowRayDirection /= tmax;
				if (tmax >= 0.5f)
					tmax -= 0.5f;

				vec3 shadowRayOrigin = pos + shadowRayDirection * SHADOW_RAY_ORIGIN_MOVEMENT_EPSILON;
				shadowed = true;
				
#if ANY_HIT
				traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0xFF, 1, 0, 1, shadowRayOrigin, RAY_TMIN, shadowRayDirection, tmax, 1);
#else
				traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsOpaqueEXT, 0xFF, 1, 0, 1, shadowRayOrigin, RAY_TMIN, shadowRayDirection, tmax, 1);
#endif
			}
			if (!shadowed) {
				vec3 L = light.position.xyz - pos;
				vec3 radiance = ApplyAttenuation(light.color, length(L), light.radius);
				L = normalize(L);

				vec3 F    = FresnelSchlick(max(dot(normalize(V + L), V), 0.0f), F0);
				vec3 specular = ( DistributionGGX(N, normalize(V + L), aoRoughnessMetallic.g)
									* GeometrySmith(N, V, L, aoRoughnessMetallic.g) * F)
									/ (4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f) + 0.0001f);
        
				vec3 kD = vec3(1.0f) - F;

				kD = kD - kD * aoRoughnessMetallic.b;	        

				finalColor += (kD * albedo / PI + specular) * radiance * max(dot(N, L), 0.0f);
			}
		}
	}

	// Reflection and Refraction Part
	const int iterations = ITERATIONS - 1;
	float iorPrev = 1.0f;
	float product = 1.0f;
	V = -V;

	for (int iter = 0; iter < iterations; iter++)
	{
		if (geometryNode.refractance > 0.0f)
		{
			if (dot(V, N) > 0.0f)
			{
				N *= -1.0f;
				iorPrev = geometryNode.ior;
				geometryNode.ior = 1.0f;
			}
			V = normalize(refract(V, N, iorPrev / geometryNode.ior));
			pos -= N * 0.01f;
			product *= geometryNode.refractance;
		}
		else if (geometryNode.reflectance > 0.0f)
		{
			V = normalize(reflect(V, N));
			pos += N * 0.01f;
			product *= geometryNode.reflectance;
		}
		else
			break;
#if ANY_HIT
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, pos, 0.001f, V, 10000.0f, 0);
#else
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, pos, 0.001f, V, 10000.0f, 0);
#endif
		finalColor += product * rayPayload.color;
		if (rayPayload.dist < 0.0f)
		{
			break;
		}
#if SPLIT_BLAS
		geometryNode = materials.mats[nonuniformEXT(rayPayload.objectID)];
#else
		geometryNode = geometryNodes.nodes[nonuniformEXT(rayPayload.objectID)];
#endif
		pos = pos + V * rayPayload.dist;
		N = rayPayload.normal;
	}

	finalColor = pow(finalColor, vec3(1.0f / 2.2f));

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));	// write a single texel into an image.
}