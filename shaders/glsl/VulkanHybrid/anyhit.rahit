/* Copyright (c) 2023, Sascha Willems
 *
 * SPDX-License-Identifier: MIT
 *
 * Sogang Univ, Graphics Lab
 */
#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../base/geometrytypes.glsl"
#include "../base/bufferreferences.glsl"

hitAttributeEXT vec2 attribs;

layout(binding = 10) uniform sampler2D textures[];

#if SPLIT_BLAS
layout(binding = 11, set = 0) buffer Geometries{ GeometryInfo geoms[]; } geometries;
layout(binding = 12, set = 0) buffer Materials{ MaterialInfo mats[]; } materials;
#else
layout(binding = 11, set = 0) buffer GeometryNodes { GeometryNode nodes[]; } geometryNodes;
#endif

#include "../base/geometryfunctions.glsl"

void main()
{
#if SPLIT_BLAS
	GeometryInfo geom = geometries.geoms[nonuniformEXT(gl_InstanceID)];

	Triangle tri = unpackTriangle(gl_PrimitiveID, 112, geom.vertexBufferDeviceAddress, geom.indexBufferDeviceAddress);// 4 * 4 * 7(vec4 * float * Vertex size)

	MaterialInfo geometryNode = materials.mats[nonuniformEXT(tri.vertices[0].objectID)];
#else
	GeometryNode geometryNode = geometryNodes.nodes[nonuniformEXT(gl_GeometryIndexEXT)];

	Triangle tri = unpackTriangle(gl_PrimitiveID, 112, geometryNode.vertexBufferDeviceAddress, geometryNode.indexBufferDeviceAddress);
#endif

	vec4 color = texture(textures[nonuniformEXT(geometryNode.textureIndexBaseColor)], tri.uv);

	if(color.a == 0.0f) {
		ignoreIntersectionEXT;
	}
}