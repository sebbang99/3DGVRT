/*
 * Sogang Univ, Graphics Lab, 2024
 * 
 * Vulkan Hybrid Shadow map
 *
 */

#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../base/geometrytypes.glsl"
#include "../base/bufferreferences.glsl"

hitAttributeEXT vec2 attribs;
layout(location = 1) rayPayloadInEXT uint payloadSeed;

layout(binding = 2) buffer GeometryNodes { GeometryNode nodes[]; } geometryNodes;
layout(binding = 12) uniform sampler2D textures[];

#include "../base/geometryfunctions.glsl"

void main()
{
	GeometryNode geometryNode = geometryNodes.nodes[nonuniformEXT(gl_GeometryIndexEXT)];

	Triangle tri = unpackTriangle(gl_PrimitiveID, 112, geometryNode.vertexBufferDeviceAddress, geometryNode.indexBufferDeviceAddress);

	vec4 color = texture(textures[nonuniformEXT(geometryNode.textureIndexBaseColor)], tri.uv);

	if(color.a == 0.0f) {
		ignoreIntersectionEXT;
	}
}